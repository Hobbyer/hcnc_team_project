<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="user.mapper.UserProductMapper">
	<resultMap id="ProductDescriptionResult" type="hashmap">
	    <result property="PRODUCT_ID" column="PRODUCT_ID" jdbcType="BIGINT"/>
	    <result property="DETAIL_DESCRIPTION" column="DETAIL_DESCRIPTION" jdbcType="CLOB" javaType="String"/>
	</resultMap>

	<!-- 상품 조회 -->
	<select id="selectProductByUser" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT P.PRODUCT_ID, P.PRODUCT_CODE, P.PRODUCT_NAME, P.PRODUCT_PRICE, P.SALED_PRICE, P.PRODUCT_CONTENT, P.PRODUCT_WEIGHT, P.IS_VISIBLE
					,PI.IMAGE_ID, PI.IMAGE_URL, PI.ALT_TEXT, PI.SORT_NUMBER, PI.IS_MAIN
			FROM PRODUCTS P
			LEFT JOIN PRODUCT_IMG PI
				ON P.PRODUCT_ID = PI.PRODUCT_ID
			WHERE P.PRODUCT_ID = #{productId}
			ORDER BY PI.SORT_NUMBER
	</select>

<!-- 	
	<select id="selectProductByUser" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT P.PRODUCT_CODE, P.PRODUCT_NAME, P.PRODUCT_PRICE, P.SALED_PRICE, P.PRODUCT_CONTENT, P.PRODUCT_WEIGHT, P.IS_VISIBLE
			FROM PRODUCTS P
			WHERE 1=1
				AND P.PRODUCT_ID = #{productId}
	</select>
-->
	<select id="slectOptionInfoByUser" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT O.OPTION_ID, O.OPTION_NAME, O.OPTION_VALUE, O.ADDITIONAL_PRICE
				, P.PRODUCT_NAME
			FROM OPTIONS O
				INNER JOIN PRODUCTS P
					ON O.PRODUCT_ID = P.PRODUCT_ID
			WHERE 1=1
				AND	O.PRODUCT_ID = #{productId}
				AND O.IS_VISIBLE = 'Y'
	</select>
	
	<!-- NG: 하나로 할수있겠지만 제가 하나로 못할거같아서 나눴음 -->
	<select id="selectTypeProductListByUser" resultType="java.util.Map">
	    SELECT p.PRODUCT_ID AS PRODUCT_ID
	         , p.PRODUCT_NAME
	         , p.PRODUCT_CODE
	         , p.PRODUCT_PRICE
	         , p.SALED_PRICE
	         , p.SORT_NUMBER
	         , p.PRODUCT_TYPE
	         , pImg.IMAGE_URL AS imageUrl
	         , pImg.ALT_TEXT AS ALT_TEXT
	         , COALESCE(r.REVIEW_COUNT, 0) AS REVIEW_COUNT
	         , COALESCE(r.AVG_RATING, 0) AS AVG_RATING
	         , COALESCE(inv.TOTAL_QUANTITY, 0) AS STOCK_QUANTITY
	    FROM PRODUCTS p
	    LEFT JOIN PRODUCT_IMG pImg 
           ON p.PRODUCT_ID = pImg.PRODUCT_ID 
          AND pImg.SORT_NUMBER = 0
	    LEFT JOIN (
	        SELECT PRODUCT_ID
	             , COUNT(*) AS REVIEW_COUNT
	             , ROUND(AVG(STAR_POINT), 1) AS AVG_RATING
	        FROM REVIEWS
	        WHERE REVIEW_STATUS = 'Y'
	        GROUP BY PRODUCT_ID
	    ) r ON p.PRODUCT_ID = r.PRODUCT_ID
	    LEFT JOIN (
		    SELECT PRODUCT_ID
		         , SUM(QUANTITY) AS TOTAL_QUANTITY
		    FROM INVENTORIES
		    GROUP BY PRODUCT_ID
		) inv ON p.PRODUCT_ID = inv.PRODUCT_ID
	    WHERE p.IS_VISIBLE = 'Y'
	    <if test="productType != null and productType != ''">
	        AND p.PRODUCT_TYPE = #{productType}
	    </if>
	    <if test="sortNumber != null and sortNumber != ''">
	        AND p.SORT_NUMBER = #{sortNumber}
	    </if>
	    ORDER BY p.SORT_NUMBER DESC
	    <if test="limit != null">
	        LIMIT #{limit}
	    </if>
	</select>
	
	<!-- 신상 -->
	<select id="selectNewProListByUser" resultType="java.util.Map">
	    SELECT p.PRODUCT_ID
	         , p.PRODUCT_NAME
	         , p.PRODUCT_CODE
	         , p.PRODUCT_PRICE
	         , p.SALED_PRICE
	         , p.SORT_NUMBER
	         , p.PRODUCT_TYPE
	         , p.SUB_CATE_ID
	         , sc.SUB_CATE_NM
	         , sc.MAIN_CATE_ID
	         , mc.MAIN_CATE_NM
	         , pImg.IMAGE_URL AS imageUrl
	         , pImg.ALT_TEXT
	         , COALESCE(r.REVIEW_COUNT, 0) AS REVIEW_COUNT
	         , COALESCE(r.AVG_RATING, 0) AS AVG_RATING
	         , COALESCE(inv.TOTAL_QUANTITY, 0) AS STOCK_QUANTITY
	         , CASE WHEN COALESCE(inv.TOTAL_QUANTITY, 0) > 0 THEN 'N' ELSE 'Y' END AS IS_SOLDOUT
	    FROM PRODUCTS p
	    LEFT JOIN SUB_CATEGORIES sc ON p.SUB_CATE_ID = sc.SUB_CATE_ID
	    LEFT JOIN MAIN_CATEGORIES mc ON sc.MAIN_CATE_ID = mc.MAIN_CATE_ID
	    LEFT JOIN PRODUCT_IMG pImg ON p.PRODUCT_ID = pImg.PRODUCT_ID AND pImg.IS_MAIN = 'Y'
	    LEFT JOIN (
	        SELECT PRODUCT_ID, COUNT(*) AS REVIEW_COUNT, ROUND(AVG(STAR_POINT), 1) AS AVG_RATING
	        FROM REVIEWS WHERE REVIEW_STATUS = 'Y' GROUP BY PRODUCT_ID
	    ) r ON p.PRODUCT_ID = r.PRODUCT_ID
	    LEFT JOIN (
	        SELECT PRODUCT_ID, SUM(QUANTITY) AS TOTAL_QUANTITY
	        FROM INVENTORIES GROUP BY PRODUCT_ID
	    ) inv ON p.PRODUCT_ID = inv.PRODUCT_ID
	    WHERE p.IS_VISIBLE = 'Y' AND p.PRODUCT_TYPE = 'new'
	      AND sc.IS_ACTIVE = 'Y' AND mc.IS_ACTIVE = 'Y'
	    <if test="mainCateId != null and mainCateId != ''">
	        AND sc.MAIN_CATE_ID = #{mainCateId}
	    </if>
	    <if test="subCateId != null and subCateId != ''">
	        AND p.SUB_CATE_ID = #{subCateId}
	    </if>
	    <choose>
	        <when test="sortType == 'name'">ORDER BY p.SORT_NUMBER DESC, p.PRODUCT_NAME ASC</when>
	        <when test="sortType == 'lowPrice'">ORDER BY p.SORT_NUMBER DESC, p.SALED_PRICE ASC</when>
	        <when test="sortType == 'highPrice'">ORDER BY p.SORT_NUMBER DESC, p.SALED_PRICE DESC</when>
	        <otherwise>ORDER BY p.SORT_NUMBER DESC, p.INPUT_DT DESC, p.PRODUCT_ID DESC</otherwise>
	    </choose>
	    LIMIT #{offset}, #{pageSize}
	</select>
	
	<!-- 추천 -->
	<select id="selectRecommendProListByUser" resultType="java.util.Map">
	    SELECT p.PRODUCT_ID
	         , p.PRODUCT_NAME
	         , p.PRODUCT_CODE
	         , p.PRODUCT_PRICE
	         , p.SALED_PRICE
	         , p.SORT_NUMBER
	         , p.PRODUCT_TYPE
	         , p.SUB_CATE_ID
	         , sc.SUB_CATE_NM
	         , sc.MAIN_CATE_ID
	         , mc.MAIN_CATE_NM
	         , pImg.IMAGE_URL AS imageUrl
	         , pImg.ALT_TEXT
	         , COALESCE(r.REVIEW_COUNT, 0) AS REVIEW_COUNT
	         , COALESCE(r.AVG_RATING, 0) AS AVG_RATING
	         , COALESCE(inv.TOTAL_QUANTITY, 0) AS STOCK_QUANTITY
	         , CASE WHEN COALESCE(inv.TOTAL_QUANTITY, 0) > 0 THEN 'N' ELSE 'Y' END AS IS_SOLDOUT
	    FROM PRODUCTS p
	    LEFT JOIN SUB_CATEGORIES sc ON p.SUB_CATE_ID = sc.SUB_CATE_ID
	    LEFT JOIN MAIN_CATEGORIES mc ON sc.MAIN_CATE_ID = mc.MAIN_CATE_ID
	    LEFT JOIN PRODUCT_IMG pImg ON p.PRODUCT_ID = pImg.PRODUCT_ID AND pImg.IS_MAIN = 'Y'
	    LEFT JOIN (
	        SELECT PRODUCT_ID, COUNT(*) AS REVIEW_COUNT, ROUND(AVG(STAR_POINT), 1) AS AVG_RATING
	        FROM REVIEWS WHERE REVIEW_STATUS = 'Y' GROUP BY PRODUCT_ID
	    ) r ON p.PRODUCT_ID = r.PRODUCT_ID
	    LEFT JOIN (
	        SELECT PRODUCT_ID, SUM(QUANTITY) AS TOTAL_QUANTITY
	        FROM INVENTORIES GROUP BY PRODUCT_ID
	    ) inv ON p.PRODUCT_ID = inv.PRODUCT_ID
	    WHERE p.IS_VISIBLE = 'Y' AND p.PRODUCT_TYPE = 'recommend'
	      AND sc.IS_ACTIVE = 'Y' AND mc.IS_ACTIVE = 'Y'
	    <if test="mainCateId != null and mainCateId != ''">
	        AND sc.MAIN_CATE_ID = #{mainCateId}
	    </if>
	    <if test="subCateId != null and subCateId != ''">
	        AND p.SUB_CATE_ID = #{subCateId}
	    </if>
	    <choose>
	        <when test="sortType == 'name'">ORDER BY p.SORT_NUMBER DESC, p.PRODUCT_NAME ASC</when>
	        <when test="sortType == 'lowPrice'">ORDER BY p.SORT_NUMBER DESC, p.SALED_PRICE ASC</when>
	        <when test="sortType == 'highPrice'">ORDER BY p.SORT_NUMBER DESC, p.SALED_PRICE DESC</when>
	        <otherwise>ORDER BY p.SORT_NUMBER DESC, p.INPUT_DT DESC</otherwise>
	    </choose>
	    LIMIT #{offset}, #{pageSize}
	</select>
	
	<!-- 인기 -->
	<select id="selectHotProListByUser" resultType="java.util.Map">
	    SELECT p.PRODUCT_ID
	         , p.PRODUCT_NAME
	         , p.PRODUCT_CODE
	         , p.PRODUCT_PRICE
	         , p.SALED_PRICE
	         , p.SORT_NUMBER
	         , p.PRODUCT_TYPE
	         , p.SUB_CATE_ID
	         , sc.SUB_CATE_NM
	         , sc.MAIN_CATE_ID
	         , mc.MAIN_CATE_NM
	         , pImg.IMAGE_URL AS imageUrl
	         , pImg.ALT_TEXT
	         , COALESCE(r.REVIEW_COUNT, 0) AS REVIEW_COUNT
	         , COALESCE(r.AVG_RATING, 0) AS AVG_RATING
	         , COALESCE(inv.TOTAL_QUANTITY, 0) AS STOCK_QUANTITY
	         , CASE WHEN COALESCE(inv.TOTAL_QUANTITY, 0) > 0 THEN 'N' ELSE 'Y' END AS IS_SOLDOUT
	    FROM PRODUCTS p
	    LEFT JOIN SUB_CATEGORIES sc ON p.SUB_CATE_ID = sc.SUB_CATE_ID
	    LEFT JOIN MAIN_CATEGORIES mc ON sc.MAIN_CATE_ID = mc.MAIN_CATE_ID
	    LEFT JOIN PRODUCT_IMG pImg ON p.PRODUCT_ID = pImg.PRODUCT_ID AND pImg.IS_MAIN = 'Y'
	    LEFT JOIN (
	        SELECT PRODUCT_ID, COUNT(*) AS REVIEW_COUNT, ROUND(AVG(STAR_POINT), 1) AS AVG_RATING
	        FROM REVIEWS WHERE REVIEW_STATUS = 'Y' GROUP BY PRODUCT_ID
	    ) r ON p.PRODUCT_ID = r.PRODUCT_ID
	    LEFT JOIN (
	        SELECT PRODUCT_ID, SUM(QUANTITY) AS TOTAL_QUANTITY
	        FROM INVENTORIES GROUP BY PRODUCT_ID
	    ) inv ON p.PRODUCT_ID = inv.PRODUCT_ID
	    WHERE p.IS_VISIBLE = 'Y' AND p.PRODUCT_TYPE = 'hot'
	      AND sc.IS_ACTIVE = 'Y' AND mc.IS_ACTIVE = 'Y'
	    <if test="mainCateId != null and mainCateId != ''">
	        AND sc.MAIN_CATE_ID = #{mainCateId}
	    </if>
	    <if test="subCateId != null and subCateId != ''">
	        AND p.SUB_CATE_ID = #{subCateId}
	    </if>
	    <choose>
	        <when test="sortType == 'name'">ORDER BY p.SORT_NUMBER DESC, p.PRODUCT_NAME ASC</when>
	        <when test="sortType == 'lowPrice'">ORDER BY p.SORT_NUMBER DESC, p.SALED_PRICE ASC</when>
	        <when test="sortType == 'highPrice'">ORDER BY p.SORT_NUMBER DESC, p.SALED_PRICE DESC</when>
	        <otherwise>ORDER BY p.SORT_NUMBER DESC, COALESCE(r.REVIEW_COUNT, 0) DESC, COALESCE(r.AVG_RATING, 0) DESC</otherwise>
	    </choose>
	    LIMIT #{offset}, #{pageSize}
	</select>

	<select id="selectCategoryProductsListByUser" resultType="java.util.Map">
	    SELECT p.PRODUCT_ID
	         , p.PRODUCT_NAME
	         , p.PRODUCT_CODE
	         , p.PRODUCT_PRICE
	         , p.SALED_PRICE
	         , p.SORT_NUMBER
	         , p.PRODUCT_TYPE
	         , p.SUB_CATE_ID
	         , sc.SUB_CATE_NM
	         , sc.MAIN_CATE_ID
	         , mc.MAIN_CATE_NM
	         , pImg.IMAGE_URL AS imageUrl
	         , pImg.ALT_TEXT
	         , COALESCE(r.REVIEW_COUNT, 0) AS REVIEW_COUNT
	         , COALESCE(r.AVG_RATING, 0) AS AVG_RATING
	         , COALESCE(inv.TOTAL_QUANTITY, 0) AS STOCK_QUANTITY
	         , CASE WHEN COALESCE(inv.TOTAL_QUANTITY, 0) > 0 THEN 'N' ELSE 'Y' END AS IS_SOLDOUT
	    FROM PRODUCTS p
	    LEFT JOIN SUB_CATEGORIES sc ON p.SUB_CATE_ID = sc.SUB_CATE_ID
	    LEFT JOIN MAIN_CATEGORIES mc ON sc.MAIN_CATE_ID = mc.MAIN_CATE_ID
	    LEFT JOIN PRODUCT_IMG pImg 
	           ON p.PRODUCT_ID = pImg.PRODUCT_ID 
	          AND pImg.IS_MAIN = 'Y'
	    LEFT JOIN (
	        SELECT PRODUCT_ID
	             , COUNT(*) AS REVIEW_COUNT
	             , ROUND(AVG(STAR_POINT), 1) AS AVG_RATING
	        FROM REVIEWS
	        WHERE REVIEW_STATUS = 'Y'
	        GROUP BY PRODUCT_ID
	    ) r ON p.PRODUCT_ID = r.PRODUCT_ID
	    LEFT JOIN (
	        SELECT PRODUCT_ID
	             , SUM(QUANTITY) AS TOTAL_QUANTITY
	        FROM INVENTORIES
	        GROUP BY PRODUCT_ID
	    ) inv ON p.PRODUCT_ID = inv.PRODUCT_ID
	    WHERE p.IS_VISIBLE = 'Y'
	      AND sc.IS_ACTIVE = 'Y'
	      AND mc.IS_ACTIVE = 'Y'
	    <if test="mainCateId != null and mainCateId != ''">
	        AND sc.MAIN_CATE_ID = #{mainCateId}
	    </if>
	    <if test="subCateId != null and subCateId != ''">
	        AND p.SUB_CATE_ID = #{subCateId}
	    </if>
	    <choose>
	        <when test="sortType == 'name'">
	            ORDER BY p.PRODUCT_NAME ASC
	        </when>
	        <when test="sortType == 'lowPrice'">
	            ORDER BY p.SALED_PRICE ASC
	        </when>
	        <when test="sortType == 'highPrice'">
	            ORDER BY p.SALED_PRICE DESC
	        </when>
	        <otherwise>
	            ORDER BY p.INPUT_DT DESC, p.SORT_NUMBER DESC
	        </otherwise>
	    </choose>
	    LIMIT #{offset}, #{pageSize}
	</select>

	<!-- 신규 COUNT -->
	<select id="selectNewProCountByUser" resultType="int">
	    SELECT COUNT(*)
	    FROM PRODUCTS p
	    LEFT JOIN SUB_CATEGORIES sc ON p.SUB_CATE_ID = sc.SUB_CATE_ID
	    LEFT JOIN MAIN_CATEGORIES mc ON sc.MAIN_CATE_ID = mc.MAIN_CATE_ID
	    WHERE p.IS_VISIBLE = 'Y' AND p.PRODUCT_TYPE = 'new'
	      AND sc.IS_ACTIVE = 'Y' AND mc.IS_ACTIVE = 'Y'
	    <if test="mainCateId != null and mainCateId != ''">
	        AND sc.MAIN_CATE_ID = #{mainCateId}
	    </if>
	    <if test="subCateId != null and subCateId != ''">
	        AND p.SUB_CATE_ID = #{subCateId}
	    </if>
	</select>
	
	<!-- 추천 COUNT -->
	<select id="selectRecommendProCountByUser" resultType="int">
	    SELECT COUNT(*)
	    FROM PRODUCTS p
	    LEFT JOIN SUB_CATEGORIES sc ON p.SUB_CATE_ID = sc.SUB_CATE_ID
	    LEFT JOIN MAIN_CATEGORIES mc ON sc.MAIN_CATE_ID = mc.MAIN_CATE_ID
	    WHERE p.IS_VISIBLE = 'Y' AND p.PRODUCT_TYPE = 'recommend'
	      AND sc.IS_ACTIVE = 'Y' AND mc.IS_ACTIVE = 'Y'
	    <if test="mainCateId != null and mainCateId != ''">
	        AND sc.MAIN_CATE_ID = #{mainCateId}
	    </if>
	    <if test="subCateId != null and subCateId != ''">
	        AND p.SUB_CATE_ID = #{subCateId}
	    </if>
	</select>
	
	<!-- 인기 COUNT -->
	<select id="selectHotProCountByUser" resultType="int">
	    SELECT COUNT(*)
	    FROM PRODUCTS p
	    LEFT JOIN SUB_CATEGORIES sc ON p.SUB_CATE_ID = sc.SUB_CATE_ID
	    LEFT JOIN MAIN_CATEGORIES mc ON sc.MAIN_CATE_ID = mc.MAIN_CATE_ID
	    WHERE p.IS_VISIBLE = 'Y' AND p.PRODUCT_TYPE = 'hot'
	      AND sc.IS_ACTIVE = 'Y' AND mc.IS_ACTIVE = 'Y'
	    <if test="mainCateId != null and mainCateId != ''">
	        AND sc.MAIN_CATE_ID = #{mainCateId}
	    </if>
	    <if test="subCateId != null and subCateId != ''">
	        AND p.SUB_CATE_ID = #{subCateId}
	    </if>
	</select>
	
	<!-- 카테고리별 COUNT -->
	<select id="selectCategoryProductsCountByUser" resultType="int">
	    SELECT COUNT(*)
	    FROM PRODUCTS p
	    LEFT JOIN SUB_CATEGORIES sc ON p.SUB_CATE_ID = sc.SUB_CATE_ID
	    LEFT JOIN MAIN_CATEGORIES mc ON sc.MAIN_CATE_ID = mc.MAIN_CATE_ID
	    WHERE p.IS_VISIBLE = 'Y'
	      AND sc.IS_ACTIVE = 'Y'
	      AND mc.IS_ACTIVE = 'Y'
	    <if test="mainCateId != null and mainCateId != ''">
	        AND sc.MAIN_CATE_ID = #{mainCateId}
	    </if>
	    <if test="subCateId != null and subCateId != ''">
	        AND p.SUB_CATE_ID = #{subCateId}
	    </if>
	</select>
	
	<select id="selectCartIdByUser" parameterType="java.util.Map" resultType="java.lang.Long">
		SELECT CART_ID
			FROM CARTS
			WHERE MEMBER_ID = #{memberId}
	</select>
	
	<insert id="insertCartsByUser" parameterType="java.util.Map" useGeneratedKeys="true" keyProperty="cartId">
		INSERT INTO CARTS (MEMBER_ID)
			<if test="tempId != null">
			VALUES ( #{tempId} )
			</if>
			<if test="tempId == null">
			VALUES ( #{memberId} )
			</if>
	</insert>

	<insert id="insertCartItemByUser" parameterType="java.util.Map" useGeneratedKeys="true" keyProperty="cartItemId">
		INSERT INTO CART_ITEMS (CART_ID, PRODUCT_ID, PRODUCT_OPTION, PRICE, QUANTITY, SUB_TOTAL, IS_CHECKED)
			<if test="tempId != null">
			VALUES ( #{cartId} , #{productId}, #{option}, #{price}, #{quantity}, #{subTotal} , 'Y')
			</if>
			<if test="tempId == null">
			VALUES ( #{cartId} , #{productId}, #{option}, #{price}, #{quantity}, #{subTotal} , 'N')
			</if>
	</insert>
	
	<insert id="insertCartItemOptionByUser" parameterType="java.util.Map">
		INSERT INTO CART_ITEM_OPTIONS (CART_ITEM_ID, OPTION_ID)
			VALUES ( #{cartItemId}, #{optionId} )
	</insert>
	
	
	<select id="selectProductQnAListByUser" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT PRODUCT_QNA_ID, MEMBER_ID, QNA_TITLE, QNA_STATUS, DATE_FORMAT(INPUT_DT, '%Y-%m-%d') AS INPUT_DT, DATE_FORMAT(UPDATE_DT, '%Y-%m-%d') AS UPDATE_DT
			FROM PRODUCT_QNA
		  WHERE 1=1
		  	AND PRODUCT_ID = #{productId}
		  ORDER BY INPUT_DT DESC
	</select>
	
	<select id="selectQnADetailByUser" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT PRODUCT_QNA_ID, MEMBER_ID, QNA_TITLE, QNA_CONTENT, DATE_FORMAT(INPUT_DT, '%Y-%m-%d') AS INPUT_DT, DATE_FORMAT(UPDATE_DT, '%Y-%m-%d') AS UPDATE_DT
			FROM PRODUCT_QNA
		  WHERE 1=1
		  	AND PRODUCT_QNA_ID = #{qnaId}
	</select>
	
	<select id="selectProductDescriptionByUser" parameterType="hashmap" resultMap="ProductDescriptionResult">
	    SELECT 
	        PRODUCT_ID,
	        DETAIL_DESCRIPTION
	    FROM PRODUCTS 
	    WHERE PRODUCT_ID = #{productId}
	</select>
	
	<!-- <select id="selectProductDescriptionByUser" parameterType="hashmap" resultMap="ProductDescriptionResult">
	    SELECT 
	        POST_ID AS PRODUCT_ID,
	        POST_CONTENT DETAIL_DESCRIPTION
	    FROM POSTS 
	    WHERE POST_ID = 42
	</select> -->
	
	<insert id="insertQnAByUser" parameterType="java.util.Map">
		INSERT INTO PRODUCT_QNA (PRODUCT_ID, MEMBER_ID, QNA_TITLE, QNA_CONTENT)
			VALUES ( #{productId}, #{memberId}, #{qnaTitle}, #{qnaContent} )
	</insert>
	
	<update id="updateProductQnAByUser" parameterType="java.util.Map">
		UPDATE PRODUCT_QNA
			SET QNA_TITLE = #{title}, QNA_CONTENT = #{content}
			WHERE 1=1
				AND PRODUCT_QNA_ID = #{qnaId}
	</update>
	
	<delete id="deleteQnAByUser" parameterType="java.util.Map">
		DELETE FROM PRODUCT_QNA
			WHERE 1=1
				AND PRODUCT_QNA_ID = #{qnaId};
	</delete>

</mapper>