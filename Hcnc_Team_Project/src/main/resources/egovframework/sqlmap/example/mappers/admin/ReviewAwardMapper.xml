<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="admin.mapper.ReviewAwardMapper">
    
    <!-- 리뷰 리스트 조회 -->
    <select id="selectProductReviewListByAdmin" resultType="java.util.Map" parameterType="java.util.Map">
	    SELECT
	          r.REVIEW_ID
	        , r.MEMBER_ID
	        , r.PRODUCT_ID
	        , p.PRODUCT_CODE AS PRODUCT_CODE
	        , p.PRODUCT_NAME AS PRODUCT_NAME
	        , r.REVIEW_TITLE
	        , r.REVIEW_CONTENT
	        , r.STAR_POINT
	        , r.INPUT_DT
	        , r.REVIEW_STATUS
	        , oi.ORDER_ID
	        , CASE WHEN pt.POINT_ID IS NOT NULL THEN 'Y' ELSE 'N' END AS POINT_ISSUED
	        , pt.INPUT_DT AS ISSUED_DT
	    FROM REVIEWS r
	    LEFT JOIN PRODUCTS p
	        ON r.PRODUCT_ID = p.PRODUCT_ID
	    LEFT JOIN ORDER_ITEMS oi
	        ON r.PRODUCT_ID = oi.PRODUCT_ID
	    LEFT JOIN ORDERS o
	        ON oi.ORDER_ID = o.ORDER_ID
	        AND r.MEMBER_ID = o.MEMBER_ID
	    LEFT JOIN POINTS pt
	        ON r.MEMBER_ID = pt.MEMBER_ID
	        AND pt.DESCRIPTION = CONCAT('[리뷰 이벤트 포인트 지급]', oi.ORDER_ID, ':', r.REVIEW_ID)
	    WHERE 1=1
	        <if test="SEARCH_TYPE == '상품코드'">
	            AND p.PRODUCT_CODE LIKE CONCAT('%', #{searchValue}, '%')
	        </if>
	        <if test="SEARCH_TYPE == '상품명'">
	            AND p.PRODUCT_NAME LIKE CONCAT('%', #{searchValue}, '%')
	        </if>
	        <if test="SEARCH_TYPE == '아이디'">
	            AND r.MEMBER_ID LIKE CONCAT('%', #{searchValue}, '%')
	        </if>
	        <if test="pointYn != null and pointYn != '' and pointYn != ''">
			    <choose>
			        <when test="pointYn == 'Y'"> 
			            AND pt.POINT_ID IS NOT NULL
			        </when>
			        <when test="pointYn == 'N'">
			            AND pt.POINT_ID IS NULL
			        </when>
			    </choose>
			</if>
	    GROUP BY r.REVIEW_ID
	    ORDER BY r.INPUT_DT DESC
	</select>
    
    <!-- 자동 포인트 지급 -->
    <insert id="insertAutoReviewRewardPointsByAdmin">
        INSERT INTO POINTS (
              MEMBER_ID      
            , CHANGE_TYPE   
            , POINT          
            , DESCRIPTION
            , ORDER_ID
        )
        SELECT
              r.MEMBER_ID
            , #{changeType}
            , #{rewardPoint}
            , CONCAT(#{descriptionPrefix}, oi.ORDER_ID, ':', r.REVIEW_ID)
            , oi.ORDER_ID
        FROM REVIEWS r
        INNER JOIN ORDER_ITEMS oi
            ON r.PRODUCT_ID = oi.PRODUCT_ID
        INNER JOIN ORDERS o
            ON oi.ORDER_ID = o.ORDER_ID
            AND r.MEMBER_ID = o.MEMBER_ID
        LEFT JOIN POINTS p
            ON p.MEMBER_ID = r.MEMBER_ID
           AND p.DESCRIPTION = CONCAT(#{descriptionPrefix}, oi.ORDER_ID, ':', r.REVIEW_ID)
        WHERE r.REVIEW_STATUS = 'Y' 
          AND CHAR_LENGTH(r.REVIEW_CONTENT) >= 100
          AND r.STAR_POINT >= 4
          AND r.INPUT_DT BETWEEN o.ORDER_DT AND DATE_ADD(o.ORDER_DT, INTERVAL 3 DAY)
          AND p.POINT_ID IS NULL
        ORDER BY r.INPUT_DT DESC
    </insert>
    
    <!-- 수동 지급 -->
    <insert id="insertReviewRewardPointsByAdmin">
        INSERT INTO POINTS(
             MEMBER_ID
            ,CHANGE_TYPE
            ,POINT
            ,DESCRIPTION
            ,ORDER_ID
        ) VALUES (
            #{MEMBER_ID},
            #{CHANGE_TYPE},
            #{POINT},
            #{DESCRIPTION},
            #{ORDER_ID}
        )
    </insert>
    
</mapper>