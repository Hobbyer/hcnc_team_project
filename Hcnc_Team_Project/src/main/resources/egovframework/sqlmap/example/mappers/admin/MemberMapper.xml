<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="admin.mapper.MemberMapper">
	
	<!--관리자 로그인 -->
	<select id="adminLogin" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT
			M.MEMBER_ID
			,'O' AS PASSWORD
		  FROM MEMBERS M INNER JOIN GRADES G
		    ON M.GRADE_CODE = G.GRADE_CODE
		 WHERE M.MEMBER_ID = #{MEMBER_ID}
		   AND M.PASSWORD = #{PASSWORD}
		   AND M.GRADE_CODE = 9
	</select>
	
	<!-- 회원 목록 조회와 검색-->
	<select id="selectMemberList" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT 
			M.INPUT_DT
			,M.USER_NAME
			,M.MEMBER_ID
			,M.EMAIL_ADDR
			,G.GRADE_NAME 
 			,M.PHONE_NUMBER
 			,M.STATUS
			,M.GENDER
			,M.BIRTH
			,M.MEMBER_TYPE
		  FROM MEMBERS M INNER JOIN GRADES G
		    ON M.GRADE_CODE = G.GRADE_CODE
		 WHERE 1=1 
	     <if test="SEARCH_TYPE == '아이디'">
           AND M.MEMBER_ID LIKE CONCAT('%', #{SEARCH_TEXT}, '%')
         </if>
         <if test="SEARCH_TYPE == '이름'">
           AND M.USER_NAME LIKE CONCAT('%', #{SEARCH_TEXT}, '%')
         </if>
         <if test="SEARCH_TYPE == '이메일'">
          AND M.EMAIL_ADDR LIKE CONCAT('%', #{SEARCH_TEXT}, '%')
        </if>
         <if test="GRADE_NAME != null and GRADE_NAME != ''">
           AND G.GRADE_NAME = #{GRADE_NAME}
        </if>
        <if test="PHONE_NUMBER != null and PHONE_NUMBER != ''">
          AND M.PHONE_NUMBER LIKE CONCAT('%', #{PHONE_NUMBER}, '%')
        </if>
       	<!-- 검색 범위에서 마지막날도 포함하기  -->
       	<!-- BETWEEN 은 기본적으로 양쪽 끝값을 포함 -->
       	<!-- M.INPUT_DT컬럼이 DATETIME 이런 식으로 날짜만 넘기면 → 실제로는 2025-09-15 00:00:00 으로 처리 -->
       	<!-- 2025-09-15 10:30:00 같은 값은 범위에 안 들어오고 빠짐 -->
       	<!-- 시간이 있는 DATETIME 전체 포함시키고 싶으면: INTERVAL 1 DAY -->
       	<!-- mariadb => DATE_ADD()함수 활용 -->
        <if test="FIRST_LOGIN_DT != null and LAST_LOGIN_DT != null">
          AND M.INPUT_DT BETWEEN #{FIRST_LOGIN_DT} AND DATE_ADD(#{LAST_LOGIN_DT}, INTERVAL 1 DAY)
       </if>
	</select>
	
	
	<!-- 회원등급 조회 -->
	<select id="selectMemberGradeList" resultType="java.util.Map">
		SELECT 
			GRADE_CODE
			,GRADE_NAME
		FROM GRADES
		ORDER BY GRADE_CODE
	</select>	
	
	<!-- 관리자등록 -->
	<insert id="insertMember" parameterType="java.util.Map">
		INSERT INTO MEMBERS(
        	MEMBER_ID, 
        	USER_NAME, 
        	PASSWORD, 
        	EMAIL_ADDR, 
        	PHONE_NUMBER,
            BIRTH, 
            GENDER, 
            GRADE_CODE, 
            MEMBER_TYPE, 
            LOGIN_TYPE
  	   )VALUES(
       		#{MEMBER_ID}
        	,#{USER_NAME}
        	,#{PASSWORD}
        	,#{EMAIL_ADDR}
        	,#{PHONE_NUMBER}
        	,#{BIRTH}
        	,#{GENDER}
        	,#{GRADE_CODE}
        	,#{MEMBER_TYPE}
        	,CASE 
            	WHEN #{GRADE_CODE} = 9 THEN 'NORMAL'
            	ELSE #{LOGIN_TYPE}
        	  END
    	 )
	</insert>
	
	<!-- 회원, 관리자 등록시 중복체크 -->
	<select id="isDuplicated" parameterType="java.util.Map" resultType="int">
		SELECT COUNT(*)
		  FROM MEMBERS
		 WHERE (MEMBER_ID = #{MEMBER_ID}
		 	OR EMAIL_ADDR = #{EMAIL_ADDR}
		 	OR PHONE_NUMBER = #{PHONE_NUMBER})
	</select>
	
	<!-- 회원 상세조회 -->
	<select id="selectMemberDetail" parameterType="String" resultType="java.util.Map">
	   SELECT 
			MEMBER_ID
			,PASSWORD
			,USER_NAME
            ,LOGIN_TYPE
            ,EMAIL_ADDR
            ,PHONE_NUMBER
            ,BIRTH
            ,GENDER
            ,GRADE_CODE
            ,FIRST_LOGIN_DT
            ,LAST_LOGIN_DT
            ,STATUS
            ,PRICE_AMOUNT
            ,INPUT_DT
            ,UPDATE_DT
            ,MEMBER_TYPE
         FROM MEMBERS
        WHERE MEMBER_ID = #{memberId}
	</select>
	
	<!-- 회원 정보 수정 -->
	<update id="memberUpdate" parameterType="java.util.Map">
		UPDATE MEMBERS
		   SET USER_NAME = #{USER_NAME}
		   	   ,PASSWORD = #{PASSWORD}
		   	   ,EMAIL_ADDR = #{EMAIL_ADDR}
		   	   ,PHONE_NUMBER = #{PHONE_NUMBER}
		   	   ,GENDER = #{GENDER}
		   	   ,BIRTH = STR_TO_DATE(#{BIRTH}, '%Y%m%d%H%i%s')
		   	   ,FIRST_LOGIN_DT = STR_TO_DATE(#{FIRST_LOGIN_DT}, '%Y%m%d%H%i%s')
		   	   ,LAST_LOGIN_DT = STR_TO_DATE(#{LAST_LOGIN_DT}, '%Y%m%d%H%i%s')
		   	   ,GRADE_CODE = #{GRADE_CODE}
		   	   ,MEMBER_TYPE = #{MEMBER_TYPE}
		   	   ,STATUS = #{STATUS}
		   	   ,UPDATE_DT = NOW()
		 WHERE MEMBER_ID = #{MEMBER_ID}
	</update>
	
	<!-- 회원, 관리자 정보 수정시 중복체크 -->
	<select id="updateDuplicated" parameterType="java.util.Map" resultType="int">
       SELECT COUNT(*)
         FROM MEMBERS
        WHERE MEMBER_ID != #{MEMBER_ID}
          AND (EMAIL_ADDR = #{EMAIL_ADDR}
           OR PHONE_NUMBER = #{PHONE_NUMBER})
   </select>
	
   <!-- 회원 등급 관리 조회 -->
   <select id="selectGradeManage" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT 
			M.MEMBER_ID
			,M.USER_NAME
			,M.EMAIL_ADDR
			,M.PHONE_NUMBER
			,M.GRADE_CODE
			,G.GRADE_NAME
			,M.PRICE_AMOUNT
			,M.INPUT_DT
		FROM MEMBERS M INNER JOIN GRADES G
		  ON M.GRADE_CODE = G.GRADE_CODE
		WHERE 1=1 AND M.GRADE_CODE != 9
		<if test="USER_NAME != null and USER_NAME != ''">
			AND M.USER_NAME LIKE CONCAT ('%',#{USER_NAME},'%')
		</if>
		<if test="EMAIL_ADDR != null and EMAIL_ADDR != ''">
			AND M.EMAIL_ADDR LIKE CONCAT ('%',#{EMAIL_ADDR},'%')
		</if>
		<if test="SDATE != null and EDATE != null">
			AND M.INPUT_DT BETWEEN #{SDATE} AND DATE_ADD(#{EDATE}, INTERVAL 1 DAY)
		</if>
		<if test="GRADE_CODE != null and GRADE_CODE != ''">
		   	AND G.GRADE_CODE = #{GRADE_CODE} 
		</if>
   </select>
   
   <!-- 관리자 뺴고 오로지 회원 등급만 조회-->
   <select id="selectGradeExceptionAdminList" resultType="java.util.Map">
   	 SELECT 
          GRADE_CODE
          ,GRADE_NAME
      FROM GRADES
     WHERE GRADE_CODE <![CDATA[<>]]> 9 
     ORDER BY GRADE_CODE 
   </select>
   
   <!-- 회원등급 자동 변경-->
   <update id="updateMemberGrade" parameterType="java.util.Map">
    UPDATE MEMBERS M
       SET M.GRADE_CODE =
       <choose>
           <!-- 수동 변경 -->
           <when test="GRADE_CODE != null and GRADE_CODE != ''">
               #{GRADE_CODE}
           </when>
           <!-- 자동 변경 -->
           <otherwise>
               (SELECT G.GRADE_CODE
                  FROM GRADES G
                 WHERE M.PRICE_AMOUNT >= G.STANDARD_AMOUNT
                 ORDER BY G.STANDARD_AMOUNT DESC
                 LIMIT 1)
           </otherwise>
       </choose>
      WHERE M.MEMBER_ID = #{MEMBER_ID}
   </update>
   
	<!-- 전체 회원 등급 자동 업데이트 (관리자 제외) -->
	<update id="updateAllMemberGradeAuto">
	    UPDATE MEMBERS M
	       SET M.GRADE_CODE = (
	           SELECT G.GRADE_CODE
	             FROM GRADES G
	            WHERE M.PRICE_AMOUNT >= G.STANDARD_AMOUNT
	            ORDER BY G.STANDARD_AMOUNT DESC
	            LIMIT 1
	       )
	     WHERE M.GRADE_CODE != 9  -- 관리자 제외
	</update>
   
   	<!-- 휴면/탈퇴 회원 조회 -->
	<select id="selectDormantWithdrawnMembers"
		parameterType="java.util.Map" resultType="java.util.Map">
		SELECT
			'0' AS CHK, 
			M.MEMBER_ID,
			M.USER_NAME,
			M.EMAIL_ADDR,
			M.PHONE_NUMBER,
			M.PRICE_AMOUNT,
			M.STATUS,
			<!-- STATUS_NAME  -->
		  	CASE
			  WHEN M.STATUS = 'R' THEN '휴면'
			  WHEN M.STATUS = 'N' THEN '탈퇴'
		   	END AS STATUS_NAME,
			M.INPUT_DT,
			M.LAST_LOGIN_DT,
			M.UPDATE_DT,
			M.DELETE_DT,
			<!-- DAYS_SINCE_CHANGE : 지금으로 부터 휴면일과, 탈퇴일 계산 -->
		  	CASE
			  WHEN M.STATUS = 'R' THEN DATEDIFF(NOW(), M.LAST_LOGIN_DT)
			  WHEN M.STATUS = 'N' THEN DATEDIFF(NOW(), M.DELETE_DT)
		    END AS DAYS_SINCE_CHANGE
		  FROM MEMBERS M
	     WHERE M.STATUS IN ('R', 'N')

		<!-- 상태 검색 -->
		<if test="STATUS != null and STATUS != ''">
			AND M.STATUS = #{STATUS}
		</if>

		<!-- 이름 검색 -->
		<if test="USER_NAME != null and USER_NAME != ''">
			AND M.USER_NAME LIKE CONCAT('%', #{USER_NAME}, '%')
		</if>

		<!-- 이메일 검색 -->
		<if test="EMAIL_ADDR != null and EMAIL_ADDR != ''">
			AND M.EMAIL_ADDR LIKE CONCAT('%', #{EMAIL_ADDR}, '%')
		</if>

		<!-- 가입일 범위 검색 -->
		<if test="JOIN_START_DATE != null and JOIN_END_DATE != null">
			AND M.INPUT_DT BETWEEN #{JOIN_START_DATE} AND DATE_ADD(#{JOIN_END_DATE},
			INTERVAL 1 DAY)
		</if>

		<!-- 휴면일 범위 검색 (LAST_LOGIN_DT) -->
		<if test="DORMANT_START_DATE != null and DORMANT_END_DATE != null">
			AND M.LAST_LOGIN_DT BETWEEN #{DORMANT_START_DATE} AND
			DATE_ADD(#{DORMANT_END_DATE}, INTERVAL 1 DAY)
		</if>

		<!-- 탈퇴일 범위 검색 (DELETE_DT) -->
		<if test="DELETE_START_DATE != null and DELETE_END_DATE != null">
			AND M.DELETE_DT BETWEEN #{DELETE_START_DATE} AND
			DATE_ADD(#{DELETE_END_DATE}, INTERVAL 1 DAY)
		</if>
		ORDER BY
		CASE WHEN M.STATUS='R' THEN M.LAST_LOGIN_DT ELSE M.DELETE_DT END DESC
	</select>
   
    <!-- 회원 탈퇴 (상태만 변경, 실제 삭제는 아님) : 넥사크로에서 탈퇴 처리 -->
    <update id="withdrawMember" parameterType="java.util.Map">
      UPDATE MEMBERS
         SET STATUS = 'N',
           DELETE_DT = NOW(),
           UPDATE_DT = NOW()
       WHERE MEMBER_ID = #{MEMBER_ID}
         AND STATUS != 'N'
    </update>

    <!-- 실제 테이블에서 삭제 : 스케쥴러에서 돌림 -->
    <!-- 상태가 탈퇴인 사람 1년 보관후 자동삭제 -->
    <delete id="deleteOldWithdrawnMembers">
      DELETE FROM MEMBERS
       WHERE STATUS = 'N'
         AND DELETE_DT <![CDATA[<=]]> DATE_SUB(NOW(), INTERVAL 1 YEAR)
    </delete>
   	
 
   <!-- 휴면 전환: 1년 이상 미접속 회원을 휴면(R)으로 (스케쥴러)-->
   <update id="updateDormantMembers">
    UPDATE MEMBERS
       SET STATUS = 'R',
           UPDATE_DT = NOW()
     WHERE STATUS = 'Y'
       AND LAST_LOGIN_DT <![CDATA[<=]]> DATE_SUB(NOW(), INTERVAL 1 YEAR)
   </update>
 
   	
   	<!-- 휴면 회원 복구 (상태를 Y로 변경): 넥사크로에서 휴면 복구-->
    <update id="reactivateDormantMember" parameterType="java.util.Map">
     UPDATE MEMBERS
        SET STATUS = 'Y'
            ,LAST_LOGIN_DT = NOW()
            ,UPDATE_DT = NOW()
      WHERE MEMBER_ID = #{MEMBER_ID}
        AND STATUS = 'R'  
    </update>
    
	<!-- 포인트/쿠폰 관리 : 회원 관리 -->
	<select id="selectPointAndCouponList" resultType="java.util.Map" parameterType="java.util.Map">
	    SELECT M.MEMBER_ID
	          ,M.USER_NAME
	          ,M.PHONE_NUMBER
	          <!-- null값 처리 COALESCE -->
	          ,COALESCE((SELECT SUM(P.POINT) 
	              FROM POINTS P
	             WHERE M.MEMBER_ID = P.MEMBER_ID), 0) AS POINT
	          ,COALESCE((SELECT COUNT(0) 
	              FROM COUPONS C
	             WHERE C.MEMBER_ID = M.MEMBER_ID 
	               AND C.IS_USED = 'N'), 0) AS COUPON_CNT
	      FROM MEMBERS M 
	     WHERE 1=1 
	     <if test="MEMBER_ID != '' and MEMBER_ID != null">
	         AND M.MEMBER_ID LIKE CONCAT('%', #{MEMBER_ID}, '%')
	     </if>
	     <if test="USER_NAME != '' and USER_NAME != null">
	         AND M.USER_NAME LIKE CONCAT('%', #{USER_NAME}, '%')
	     </if>
	     <if test="PHONE_NUMBER != '' and PHONE_NUMBER != null">
	         AND M.PHONE_NUMBER LIKE CONCAT('%', #{PHONE_NUMBER}, '%')
	     </if>
	     <!-- 포인트 많은 순, 쿠폰 갯수 많은 순 -->
	      ORDER BY POINT DESC, COUPON_CNT DESC
	</select>
    
    <!-- 포인트 유형 조회  -->
    <select id="selectMemberChageTypeList" parameterType="java.util.Map" resultType="java.util.Map" >
     	SELECT DISTINCT CHANGE_TYPE
     	  FROM POINTS
         WHERE 1=1
         <if test="MEMBER_ID != null and MEMBER_ID != ''">
  		   AND MEMBER_ID = #{MEMBER_ID}
         </if>
         ORDER BY CHANGE_TYPE
    </select>
    
    <!-- 포인트 상세 조회 -->
	 <select id="selectPointDetailList" parameterType="java.util.Map" resultType="java.util.Map">
	   SELECT
	       P.MEMBER_ID
	       ,P.CHANGE_TYPE
	       ,P.POINT
	       ,P.DESCRIPTION
	       ,P.INPUT_DT
	       ,COALESCE(O.ORDER_NUMBER, '관리자 직접 처리') AS ORDER_NUMBER
	   FROM POINTS P 
	   LEFT JOIN ORDERS O
	     ON P.ORDER_ID = O.ORDER_ID
	   WHERE P.MEMBER_ID = #{MEMBER_ID}
	   <if test="CHANGE_TYPE != null and CHANGE_TYPE != ''">
	        AND P.CHANGE_TYPE = #{CHANGE_TYPE}
	   </if>
	   <if test="SDATE != null and EDATE != null ">
	        AND P.INPUT_DT BETWEEN #{SDATE} AND DATE_ADD(#{EDATE}, INTERVAL 1 DAY)
	   </if>
	   <if test="ORDER_NUMBER != null and ORDER_NUMBER != ''">
	       AND O.ORDER_NUMBER LIKE CONCAT('%',#{ORDER_NUMBER},'%')     
	   </if>
	   ORDER BY P.INPUT_DT DESC
	</select>
    
    <!-- 쿠폰 상세 조회 -->
    <select id="selectCouponDetailList" resultType="java.util.Map" parameterType="java.util.Map">
    	SELECT 
    		C.COUPON_CODE
    		,C.COUPON_NAME
    		,C.COUPON_TYPE
    		,CASE 
    		  WHEN C.DISCOUNT_TYPE = 'R' THEN '%'
    		  WHEN C.DISCOUNT_TYPE = 'G' THEN '₩'
    		END AS DISCOUNT_UNIT
    		,C.DISCOUNT_VALUE
    		,C.MIN_ORDER_PRICE
    		,C.ISSUED_DT
    		,C.EXPIRY_DT
    		,C.IS_USED
    		,O.ORDER_NUMBER
    		,C.USED_DT
    	 FROM COUPONS C
    	 <!-- 사용안한 쿠폰도 조회 -->
         LEFT JOIN ORDERS O
           ON C.ORDER_ID = O.ORDER_ID
    	 WHERE C.MEMBER_ID = #{MEMBER_ID}
       <if test="IS_USED != null and IS_USED != ''">
       	 	AND C.IS_USED = #{IS_USED}
       </if>
       <if test="ISSUED_START_DATE != null and ISSUED_END_DATE != null ">
       	    AND C.ISSUED_DT BETWEEN #{ISSUED_START_DATE} AND DATE_ADD(#{ISSUED_END_DATE}, INTERVAL 1 DAY)
       </if>
        <if test="EXPIRY_START_DATE != null and EXPIRY_END_DATE != null ">
       	    AND C.EXPIRY_DT BETWEEN #{EXPIRY_START_DATE} AND DATE_ADD(#{EXPIRY_END_DATE}, INTERVAL 1 DAY)
       </if>
       <if test="COUPON_TYPE != null and COUPON_TYPE != ''">
			AND C.COUPON_TYPE = #{COUPON_TYPE}       
       </if>
       ORDER BY C.ISSUED_DT DESC
    </select>
    
	<!-- 포인트 적립 및 차감 (잔액 체크 포함) -->
	<insert id="insertPoint" parameterType="java.util.Map">
	    INSERT INTO POINTS(
	        MEMBER_ID,     
	        CHANGE_TYPE,   
	        POINT,         
	        DESCRIPTION,  
	        INPUT_DT       
	    )
	    SELECT 
	        #{MEMBER_ID},                   
	        #{CHANGE_TYPE},                 
	        CASE 
	            WHEN #{CHANGE_TYPE} = '사용' THEN -ABS(#{POINT})  
	            ELSE ABS(#{POINT})                               
	        END,
	        #{DESCRIPTION},                
	        NOW()
	    <!-- 조건1: 적립인 경우 무조건 실행 (잔액 체크 불필요) -->                          
	    WHERE #{CHANGE_TYPE} != '사용'  
	       OR (SELECT COALESCE(SUM(POINT), 0)     <!-- 조건2: '사용'인 경우 잔액 체크 -->     
	           FROM POINTS                        <!-- 현재 회원의 포인트 총합 계산 -->
	           WHERE MEMBER_ID = #{MEMBER_ID}) >= ABS(#{POINT}) <!-- 현재잔액 >= 사용요청포인트 일때만 실행 -->
	    <!--결과: 잔액 부족시 INSERT 안됨 (return 0), 충분하면 차감 실행 (return 1) --> 
	</insert>
	<!-- 
	INSERT할떄 조건을 넣고 싶을때 SELECT
	
	INSERT INTO 테이블명(컬럼들...)
	SELECT 파라미터값들...
	FROM 테이블 (또는 생략 가능)
	WHERE 조건; 
	-->
	
	<!-- 쿠폰 지급 -->
	<insert id="insertCoupon" parameterType="java.util.Map">
		INSERT INTO COUPONS(
			MEMBER_ID
			,COUPON_CODE
			,COUPON_NAME
			,DISCOUNT_TYPE
			,DISCOUNT_VALUE
			,MIN_ORDER_PRICE
			,EXPIRY_DT
			,COUPON_TYPE
		)VALUES(
			#{MEMBER_ID}
			,#{COUPON_CODE}
			,#{COUPON_NAME}
			,#{DISCOUNT_TYPE}
			,#{DISCOUNT_VALUE}
			,#{MIN_ORDER_PRICE}
			,#{EXPIRY_DT}
			,#{COUPON_TYPE}
		)
	</insert>
	
	<!-- 블랙리스트 조회-->
	<select id="selectBlackListByAdmin" resultType="java.util.Map">
    SELECT 
		M.MEMBER_ID
		,M.USER_NAME
		,M.EMAIL_ADDR
		,M.PHONE_NUMBER
		,G.GRADE_NAME
		,M.UPDATE_DT
		,M.INPUT_DT
	 FROM MEMBERS M
	 JOIN GRADES G
	   ON M.GRADE_CODE = G.GRADE_CODE 
 	WHERE STATUS = 'B'   
	<if test="MEMBER_ID != '' and MEMBER_ID != null">
		AND M.MEMBER_ID LIKE CONCAT('%',#{MEMBER_ID},'%')
	</if>
	<if test="USER_NAME != '' and USER_NAME != null">
		AND M.USER_NAME LIKE CONCAT('%',#{USER_NAME},'%') 
	</if>
	<if test="PHONE_NUMBER != '' and PHONE_NUMBER != null">
    	AND M.PHONE_NUMBER LIKE CONCAT('%',TRIM(#{PHONE_NUMBER}),'%') 
	</if>
	<if test="START_INPUT_DT != null and END_INPUT_DT != null">
		AND M.INPUT_DT BETWEEN #{START_INPUT_DT} AND DATE_ADD(#{END_INPUT_DT}, INTERVAL 1 DAY)
	</if>
	  ORDER BY M.UPDATE_DT DESC;
	</select>
	
	<!-- 블랙 상세보기  -->
	<select id="selectBlackDetailListByAdmin" parameterType="String" resultType="java.util.Map">
	 	SELECT 
			M.MEMBER_ID
			,R.REPORT_ID
			,R.REPORT_TYPE
			,R.REPORT_CONTENT
			,R.REPORT_STATUS
			<!-- 신고일자 -->
			,R.INPUT_DT	
		FROM REPORT R 
		<!-- BOARD_WRITER에 멤버 아이디 넣기 -->
		JOIN MEMBERS M ON R.BOARD_WRITER = M.MEMBER_ID 
		<!-- memberId를 BOARD_WRITER에 담기 -->  
       WHERE R.BOARD_WRITER = #{memberId}
       ORDER BY R.INPUT_DT DESC            
	</select>
	
	<!-- 블랙 회원 신고취소 처리 -->
	<update id="updateMemberBlackStatusListByAdmin" parameterType="java.util.Map"> 
      UPDATE REPORT
         SET REPORT_STATUS = #{REPORT_STATUS},      
             STATUS_DT = NOW()                      
       WHERE REPORT_ID = #{REPORT_ID}              
   </update>
	
	
	<!-- 회원 가입 이력 조회를 위한 리스트 -->
	<select id="selectMemberRegHistoryListByAdmin" parameterType="java.util.Map" resultType="java.util.Map">
	SELECT 
		MEMBER_ID
		,USER_NAME
		,PHONE_NUMBER
		,LOGIN_TYPE
		,INPUT_DT
	  FROM MEMBERS
	  WHERE 1=1
     <if test="MEMBER_ID != null and MEMBER_ID != ''">
     	AND MEMBER_ID LIKE CONCAT('%',#{MEMBER_ID},'%') 
     </if>
     <if test="USER_NAME != null and USER_NAME != ''">
     	AND USER_NAME LIKE CONCAT('%',#{USER_NAME},'%')
     </if>
     <if test="PHONE_NUMBER != null and PHONE_NUMBER != ''">
     	AND PHONE_NUMBER LIKE CONCAT('%',TRIM(#{PHONE_NUMBER}),'%')
     </if>
     <if test="INPUT_START_DT != null and INPUT_END_DT != null">
     	AND INPUT_DT BETWEEN #{INPUT_START_DT} AND DATE_ADD(#{INPUT_END_DT}, INTERVAL 1 DAY)
     </if>
     <if test="LOGIN_TYPE != null and LOGIN_TYPE != ''">
     	AND LOGIN_TYPE = #{LOGIN_TYPE}
     </if>
     ORDER BY INPUT_DT DESC
	</select>
	
</mapper>